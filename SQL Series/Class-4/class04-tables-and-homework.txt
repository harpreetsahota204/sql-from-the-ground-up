Navigate to: https://www.db-fiddle.com/

In the top right corner of the webpage, be sure to select `Database: PostgreSQL 13`

Now, in the `Schema SQL` pane on the left copy and paste the following, or just click this link here: https://www.db-fiddle.com/f/xfR3hUvokfSSiQHshPbNGL/0

```
CREATE TABLE IF NOT EXISTS "workshop_workers" (
    "id" INT,
    "name" TEXT,
    "specialization" TEXT,
    "master_id" TEXT,
    "experience" INT,
    "project_id" INT
);
INSERT INTO "workshop_workers" VALUES
    (1,'Mathew Conn','woodworking',null,20,1),
    (2,'Kate Brown','woodworking','1',4,1),
    (3,'John Doe','incrusting','5',3,1),
    (4,'John Kowalsky','watchmaking','7',2,3),
    (5,'Suzan Gregowitch','incrusting',null,15,4),
    (6,'Peter Parker','watchmaking','7',3,2),
    (7,'Joe Darrington','watchmaking',null,13,2),
    (8,'Mary Smith','woodworking','1',4,4),
    (9,'Carlos Bell','incrusting','5',1,4),
    (10,'Dennis Wright','watchmaking','7',3,3);
```


### HOMEWORK

Use this fiddle: https://www.db-fiddle.com/f/2WUAs9mD6st9HBNqpj6wK4/1

Or copy and paste this 

CREATE TABLE IF NOT EXISTS "person" (
    "id" INT,
    "name" TEXT,
    "mother_id" INT,
    "father_id" INT,
    "year_born" INT
);
INSERT INTO "person" VALUES
    (1,'Victor Allison',14,15,1993),
    (2,'Gabriela Allison',14,15,1997),
    (3,'Linda Reese',16,17,1991),
    (4,'John Reese',16,17,1994),
    (5,'Julie Cash',null,18,1999),
    (6,'Tiffany Hawkins',19,20,1995),
    (7,'Jeremy Hawkins',19,20,1994),
    (8,'Nick Kovalsky',14,null,1997),
    (9,'Edith Johnson',null,null,1970),
    (10,'John Kersky',null,null,1994),
    (11,'Paul Weber',null,null,1969),
    (12,'Otis Weber',9,11,2001),
    (13,'Sophie Weber',9,11,1997),
    (14,'Julie Allison',null,null,1974),
    (15,'Oscar Allison',null,null,1970),
    (16,'Marie Simpson',null,null,1965),
    (17,'Jack Reese',null,null,1960),
    (18,'Mark Cash',null,null,1963),
    (19,'Alice Hawkins',null,null,1967),
    (20,'David Hawkins',null,null,1962);


EXERCISES

1. Show the name of each person (name the column child_name) together with the name of their mother (name the column mother_name). Include all people even those for whom there is no information about their mother.

2. List all pairs of full siblings. Full siblings are people who have the same mother and the same father. Name the columns with sibling names younger_sibling and older_sibling (use column year_born to identify who is younger).

You can assume that in our database no two siblings were born in the same year and there are no more than two siblings per family.


SOLUTIONS

1. SELECT
  child.name  AS child_name,
  mother.name AS mother_name
FROM person AS child
LEFT JOIN person AS mother
  ON child.mother_id = mother.id
  
2. SELECT
  ys.name AS younger_sibling,
  os.name AS older_sibling
FROM person AS ys
JOIN person AS os
  ON ys.mother_id = os.mother_id
  AND ys.father_id = os.father_id
WHERE ys.year_born > os.year_born


MORE HOMEWORK

Go visit this fiddle, same tables from class but now you get homework
Check out the tables here: https://www.db-fiddle.com/f/dBL61FGbW6Qt2UKFBoyefy/0

EXERCISES

1. For each member of the orchestra who has an instrument show their name and the average price (value) they paid for all of their instruments.

2.  For each orchestra, show a report consisting of:

Name of the orchestra as the name column.
Country/Countries in which the orchestra played as the country column.
Number of concerts in this country as the concerts_no column.
Average rating of the concerts played by this orchestra in this country as the avg_rating column.
Show only the rows of the report for which the orchestra played more than once in a given country.


3. For each orchestra show the name of the orchestra, the name of the city where the orchestra received the highest rating for its performance, and the rating.




SOLUTIONS

1. 

SELECT
  members.name,
  AVG(value)
FROM members
JOIN instruments
  ON members.id = instruments.owner_id
GROUP BY members.name

2. 

SELECT
  orchestras.name AS name,
  country AS country,
  COUNT(country) AS concerts_no,
  AVG(concerts.rating) AS avg_rating
FROM orchestras
JOIN concerts
  ON orchestras.id = concerts.orchestra_id
GROUP BY orchestras.name, concerts.country
HAVING COUNT(country) > 1

3. 
SELECT
  o.name,
  c.city,
  c.rating
FROM orchestras o
JOIN concerts c
  ON o.id = c.orchestra_id
WHERE c.rating IN (
  SELECT 
    MAX(con.rating)
  FROM concerts con
  WHERE con.orchestra_id = o.id
)